@model ZoipSwitch.Models.cases

@{
    Layout = null;
}

<div class="create-item">

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.case_id)
    <div class="container">
        <div class="form-group margin-5-0 col-sm-12 border-box">
            @Html.LabelFor(model => model.case_status_id, htmlAttributes: new { @class = "control-label" }):
            @if (Model.case_status_id == 2)
            {
                <span>Բաց</span>
            }
            else if (Model.case_status_id == 3)
            {
                <span>Փակ</span>
            }
            else
            {
                <span> </span>
            }
            <br />
            @Html.LabelFor(model => model.creator_operator_name, htmlAttributes: new { @class = "control-label" }):
            @Html.DisplayFor(model => model.creator_operator_name)
            <br />
            @Html.LabelFor(model => model.completing_operator_name, htmlAttributes: new { @class = "control-label" }):
            @Html.DisplayFor(model => model.completing_operator_name)
            <br />
            @Html.LabelFor(model => model.start_date, htmlAttributes: new { @class = "control-label" }):
            @Html.DisplayFor(model => model.start_date)
            <br />
            @Html.LabelFor(model => model.end_date, htmlAttributes: new { @class = "control-label" }):
            @Html.DisplayFor(model => model.end_date)
        </div>

        <div class="form-group margin-5-0 col-md-3 col-sm-6 border-box">
            @Html.LabelFor(model => model.case_type_id, htmlAttributes: new { @class = "control-label" })
            @(Html.Kendo().ComboBoxFor(model => model.case_type_id)
                                .DataTextField("Text")
                                .DataValueField("Value")
                                .Placeholder("-- Select --")
                                .Filter(FilterType.StartsWith)
                                .BindTo(ViewBag.vbTypes)
                                .HtmlAttributes(new { @class = "input-item" })
            )
            @Html.ValidationMessageFor(model => model.case_type_id)
        </div>

        <div class="form-group margin-5-0 col-md-3 col-sm-6 border-box">
            @Html.LabelFor(model => model.case_urgency_id, htmlAttributes: new { @class = "control-label" })
            @(Html.Kendo().ComboBoxFor(model => model.case_urgency_id)
                                .DataTextField("Text")
                                .DataValueField("Value")
                                .Placeholder("-- Select --")
                                .Filter(FilterType.StartsWith)
                                .BindTo(ViewBag.vbUrgencises)
                                .HtmlAttributes(new { @class = "input-item" })
            )
            @Html.ValidationMessageFor(model => model.case_urgency_id)
        </div>

        <div class="form-group margin-5-0 col-md-6 col-sm-12 border-box">
            @Html.LabelFor(model => model.case_department_id, htmlAttributes: new { @class = "control-label" })
            @(Html.Kendo().ComboBoxFor(model => model.case_department_id)
                                .DataTextField("Text")
                                .DataValueField("Value")
                                .Placeholder("-- Select --")
                                .Filter(FilterType.StartsWith)
                                .BindTo(ViewBag.vbDepartments)
                                .HtmlAttributes(new { @class = "input-item" })
            )
            @Html.ValidationMessageFor(model => model.case_department_id)
        </div>
        <div class="clear"></div>
    </div>
    <div class="col-sm-12 border-box" style="margin-top:15px;">
        <ul class="nav nav-tabs">
            <li class="active">
                <a data-toggle="tab" href="#tabFor_Actions">Actions</a>
            </li>
        </ul>
        <div class="tab-content">
            <div id="tabFor_Actions" class="tab-pane fade in active">
                @(Html.Kendo().Grid<ZoipSwitch.Models.actions>()
                              .Name("actions")
                              .Columns(columns =>
                              {
                                  columns.Bound(model => model.action_id).Hidden();
                                  columns.Bound(model => model.case_id).Hidden();
                                  columns.Bound(model => model.date).Width(190);
                                  columns.ForeignKey(model => model.action_category_id, (List<SelectListItem>)ViewBag.vbActionCategories, "Value", "Text").EditorTemplateName("action_categories").Width(130);
                                  columns.ForeignKey(model => model.action_type_id, (List<SelectListItem>)ViewBag.vbActionTypes, "Value", "Text").EditorTemplateName("action_types").Width(170);
                                  columns.ForeignKey(model => model.action_status_id, (List<SelectListItem>)ViewBag.vbActionStatuses, "Value", "Text").EditorTemplateName("action_statuses").Width(130);
                                  columns.ForeignKey(model => model.resident_id, (List<SelectListItem>)ViewBag.vbResidents, "Value", "Text").EditorTemplateName("residents").Width(200);
                                  columns.ForeignKey(model => model.operator_id, (List<SelectListItem>)ViewBag.vbOperators, "Value", "Text").EditorTemplateName("operators").Width(200);
                                  columns.Bound(model => model.file).Width(70);
                                  columns.Bound(model => model.description);
                                  columns.Command(commands =>
                                  {
                                      commands.Destroy().Text(" ");
                                  }).Title(" ").Width(55);
                              })
                              .ToolBar(toolbar =>
                              {
                                  toolbar.Create().Text("New Action");
                              })
                              .Editable(editable => editable.Mode(GridEditMode.InCell))
                                  .DataSource(dataSource => dataSource
                                      .Ajax()
                                      .Batch(true)
                                      .PageSize(5)
                                      .Read(read => read.Action("ReadActions", "actions", new { id = @Model.case_id }))
                                      .Model(model =>
                                      {
                                          model.Id(p => p.action_id);
                                      }
                                      )
                                  )
                                  .Scrollable()
                                  .Resizable(resize => resize.Columns(true))
                                  .Reorderable(reorder => reorder.Columns(true))
                                  .Pageable()
                                  .Sortable()
                                  .Mobile(MobileMode.Auto)
                )
            </div>
        </div>
    </div>

    <div class="form-group margin-5-0 align-right">
        @*<p id="errormssg"></p>*@
        <button class="btn btn-alt btn-hover btn-default" id="dtSave">
            <span>Save</span>
            <i class="glyph-icon icon-floppy-o"></i>
        </button>
        <button class="btn btn-alt btn-hover btn-default" id="dtCancel">
            <span>Close</span>
            <i class="glyph-icon icon-elusive-cancel-circled2"></i>
        </button>
    </div>
    <div class="clear"></div>
</div>

<script>
    var containerHeight = $(".container").height();
    var gridHeight =
        $(window).height() - containerHeight - 200;
    $(".k-grid").height(gridHeight);



    $(document).ready(function () {

        $("#dtCancel")
            .click(function () {
                if ($(this).closest(".k-window-content").data("kendoWindow"))
                    $(this).closest(".k-window-content").data("kendoWindow").close();
            });
        $("#dtSave")
            .click(function (e) {
                //var errTempl = '<div class="k-widget k-tooltip k-tooltip-validation" style="margin:0.5em"><span class="k-icon k-warning"> </span>#=message#<div class="k-callout k-callout-n"></div></div>';
                //var validator = $(".create-item").kendoValidator({
                //    errorTemplate: errTempl
                //}).data("kendoValidator");
                //if (!validator.validate()) {
                //    return false;
                //}

                var item = new Object();
                item.case_id = '@Model.case_id';
                item.case_status_id = '@Model.case_status_id';
                item.case_type_id = $("#case_type_id").val();
                item.case_urgency_id = $("#case_urgency_id").val();
                item.case_department_id = $("#case_department_id").val();
                item.start_date = '@Model.start_date';
                item.end_date = '@Model.end_date';
                item.creator_operator_name = '@Model.creator_operator_name';
                item.completing_operator_name = '@Model.completing_operator_name';


                var actionGrid = $("#actions").data("kendoGrid"), parameterMap = actionGrid.dataSource.transport.parameterMap;
                var currentActionData = actionGrid.dataSource.data();
                var rAction = [];
                for (var i = 0; i < currentActionData.length; i++) {
                    var itm = new Object();
                    if (currentActionData[i].isNew()) {
                        itm.action_id = currentActionData[i].action_id;
                        itm.case_id = currentActionData[i].case_id;
                        itm.operator_id = currentActionData[i].operator_id;
                        itm.action_category_id = currentActionData[i].action_category_id;
                        itm.action_type_id = currentActionData[i].action_type_id;
                        itm.action_status_id = currentActionData[i].action_status_id;
                        itm.resident_id = currentActionData[i].resident_id;
                        itm.description = currentActionData[i].description;
                        itm.file = currentActionData[i].file;
                        itm.date = currentActionData[i].date;
                        itm.RecordStatus = String(1);
                        rAction.push(itm);
                    } else if (currentActionData[i].dirty) {
                        itm.action_id = currentActionData[i].action_id;
                        itm.case_id = currentActionData[i].case_id;
                        itm.operator_id = currentActionData[i].operator_id;
                        itm.action_category_id = currentActionData[i].action_category_id;
                        itm.action_type_id = currentActionData[i].action_type_id;
                        itm.action_status_id = currentActionData[i].action_status_id;
                        itm.resident_id = currentActionData[i].resident_id;
                        itm.description = currentActionData[i].description;
                        itm.file = currentActionData[i].file;
                        itm.date = currentActionData[i].date;
                        itm.RecordStatus = String(2);
                        rAction.push(itm);
                    }
                }
                for (var i = 0; i < actionGrid.dataSource._destroyed.length; i++) {
                    var itm = new Object();
                    itm.action_id = actionGrid.dataSource._destroyed[i].action_id;
                    itm.case_id = actionGrid.dataSource._destroyed[i].case_id;
                    itm.operator_id = actionGrid.dataSource._destroyed[i].operator_id;
                    itm.action_category_id = actionGrid.dataSource._destroyed[i].action_category_id;
                    itm.action_type_id = actionGrid.dataSource._destroyed[i].action_type_id;
                    itm.action_status_id = actionGrid.dataSource._destroyed[i].action_status_id;
                    itm.resident_id = actionGrid.dataSource._destroyed[i].resident_id;
                    itm.description = actionGrid.dataSource._destroyed[i].description;
                    itm.file = actionGrid.dataSource._destroyed[i].file;
                    itm.date = actionGrid.dataSource._destroyed[i].date;
                    itm.RecordStatus = String(3);
                    rAction.push(itm);
                }
                item.Actions = rAction;

                var rt = false;
                var dt;
                var q = $.ajax({
                    url: '@Url.Action("Save", "cases")',
                    dataType: "json",
                    type: "POST",
                    data: JSON.stringify({ cases: item }),
                    contentType: "application/json; charset=utf-8",
                    async: false,
                    success: function (data) {
                        dt = data;
                        rt = true;
                    },
                    error: function (xhr) {
                        dt = xhr;
                        rt = false;
                    }
                });
                if (rt == true) {
                    if (dt.statuscode == 1) {
                        $(this).closest(".k-window-content").data("kendoWindow").close();
                        return false;
                    }
                    else {
                        //$("#errormssg").html(dt.message);
                        alert(dt.message);
                        return false;
                    }
                }
                else {
                    //system error ocured. The popup will be closed. The view will be redirected to error page.
                    $(this).closest(".k-window-content").data("kendoWindow").close();
                }
            });
    });
</script>


